<?php

    namespace CitasBundle\Repository;
    use Doctrine\ORM\EntityRepository;
    use Doctrine\ORM\Query\Expr\Join;

    /**
     * CitasRepository
     *
     * This class was generated by the Doctrine ORM. Add your own custom
     * repository methods below.
     */
    class CitasRepository extends EntityRepository {

        /**
         * @param null $name
         * @return array
         */
        public function findBySearchAjaxName($name = null) {
            $qb = $this->getEntityManager()->createQueryBuilder();

            $qb->select([
                    'c.id',
                    'c.dateAt fecha',
                    'c.citationAt citacion',
                    sprintf("CONCAT(p.name, ' ', p.lastName) paciente"),
                    sprintf("CONCAT(m.name, ' ', m.lastName) medico"),
                    'e.name especialidad',
                    's.name consultorio',
                    'x.name eps'
                ])
                ->from('CitasBundle:Citas', 'c')
                ->innerJoin('CitasBundle:Pacientes', 'p', Join::WITH, $qb->expr()->eq('c.patient', 'p.id'))
                ->innerJoin('CitasBundle:Medicos', 'm', Join::WITH, $qb->expr()->eq('c.doctor', 'm.id'))
                ->innerJoin('CitasBundle:Especialidades', 'e', Join::WITH, $qb->expr()->eq('m.specialty', 'e.id'))
                ->innerJoin('CitasBundle:Consultorios', 's', Join::WITH, $qb->expr()->eq('c.consulting', 's.id'))
                ->innerJoin('CitasBundle:Eps', 'x', Join::WITH, $qb->expr()->eq('p.eps', 'x.id'))
                ->where($qb->expr()->like('p.lastName', $qb->expr()->literal('%'.$name.'%')))
                ->andWhere($qb->expr()->eq('c.isActive', 1))
            ;

            $query = $qb->getQuery();
            return ['query' => $query->getSQL(), 'result' => $query->getResult()];
        }

        /**
         * @param null $document
         * @return array
         */
        public function findBySearchAjaxDocument($document = null) {

            $qb = $this->getEntityManager()->createQueryBuilder();

            $qb->select([
                'c.id',
                'c.dateAt fecha',
                'c.citationAt citacion',
                sprintf("CONCAT(p.name, ' ', p.lastName) AS paciente"),
                sprintf("CONCAT(m.name, ' ', m.lastName) AS medico"),
                'e.name especialidad',
                's.name consultorio',
                'x.name eps'
            ])
                ->from('CitasBundle:Citas', 'c')
                ->innerJoin('CitasBundle:Pacientes', 'p', Join::WITH, $qb->expr()->eq('c.patient', 'p.id'))
                ->innerJoin('CitasBundle:Medicos', 'm', Join::WITH, $qb->expr()->eq('c.doctor', 'm.id'))
                ->innerJoin('CitasBundle:Especialidades', 'e', Join::WITH, $qb->expr()->eq('m.specialty', 'e.id'))
                ->innerJoin('CitasBundle:Consultorios', 's', Join::WITH, $qb->expr()->eq('c.consulting', 's.id'))
                ->innerJoin('CitasBundle:Eps', 'x', Join::WITH, $qb->expr()->eq('p.eps', 'x.id'))
                ->where($qb->expr()->eq('p.document', $document))
                ->andWhere($qb->expr()->eq('c.isActive', 1))
            ;

            $query = $qb->getQuery();
            return ['query' => $query->getSQL(), 'result' => $query->getResult()];
        }

        /**
         * @param \DateTime|null $date
         * @return array
         */
        public function findBySearchAjaxDate($date) {

            $init = $date.' 00:00:00';
            $end = $date.' 23:59:59';
            $qb = $this->getEntityManager()->createQueryBuilder();

            $qb->select([
                'c.id',
                'c.dateAt fecha',
                'c.citationAt citacion',
                sprintf("CONCAT(p.name, ' ', p.lastName) paciente"),
                sprintf("CONCAT(m.name, ' ', m.lastName) medico"),
                'e.name especialidad',
                's.name consultorio',
                'x.name eps'
            ])
                ->from('CitasBundle:Citas', 'c')
                ->innerJoin('CitasBundle:Pacientes', 'p', Join::WITH, $qb->expr()->eq('c.patient', 'p.id'))
                ->innerJoin('CitasBundle:Medicos', 'm', Join::WITH, $qb->expr()->eq('c.doctor', 'm.id'))
                ->innerJoin('CitasBundle:Especialidades', 'e', Join::WITH, $qb->expr()->eq('m.specialty', 'e.id'))
                ->innerJoin('CitasBundle:Consultorios', 's', Join::WITH, $qb->expr()->eq('c.consulting', 's.id'))
                ->innerJoin('CitasBundle:Eps', 'x', Join::WITH, $qb->expr()->eq('p.eps', 'x.id'))
                ->where($qb->expr()->gte('c.citationAt', $qb->expr()->literal($init)))
                ->andWhere($qb->expr()->lte('c.citationAt', $qb->expr()->literal($end)))
                ->andWhere($qb->expr()->eq('c.isActive', 1))
            ;

            $query = $qb->getQuery();
            return ['query' => $query->getSQL(), 'result' => $query->getResult()];
        }
    }